#! /usr/bin/env ruby

def debug(info)
  puts "DEBUG: #{info.is_a?(String) ? info : info.inspect}"
end

ram_source = '/Volumes/RamDisk/sr'
ext_source = '/Volumes/RamDisk/new'
#hd_source = '/Users/chenronghua/workspace/scarecrow-rules' 
hd_source = '/Users/chenronghua/workspace/front' 

source = ARGV[0]
source = ram_source if source == 'ram'
source = ext_source if source == 'ext'
source = hd_source if source == 'hd'

Dir.chdir(source)
debug "git repo: #{source}"

def readSHA(target, sha, type=nil)

  type = type || `git cat-file -t #{sha}`.chomp
  debug "target:#{target}, sha: #{sha}, type: #{type}"

  if type == 'commit'
    commit = `git cat-file -p #{sha}`
    tree = commit.split(/\s+/)[1]
    return readSHA(target, tree, 'tree')
  elsif type == 'tree'
    tree = `git cat-file -p #{sha}`
    return tree if target.nil? || target.empty?
    t = target[0]
    #if t == '*'
    #  return {}.tap do |s|
    #    tree.each_line do |l|
    #      info = l.split(/\s+/)
    #      if info[1] == 'blob'
    #        s[info[3]] = readSHA(nil, info[2], 'blob')
    #      end
    #    end
    #  end
    #end
    tree.each_line do |l|
      info = l.split(/\s+/)
      if t == info[3]
        # tree
        if info[1] == 'tree'
          return readSHA(target[1..-1], info[2], 'tree')
        # blob
        else
          return readSHA(target[1..-1], info[2], 'blob')
        end
      end
    end
    raise RuntimeError.new("no object found for #{t}")

  elsif type == 'blob'
    return `git cat-file -p #{sha}` if target.nil? || target.empty?
    raise RuntimeError.new("can not found objects under #{target[0]}")
  end
end


sha = ARGV[1]
target = ARGV[2]

start_time = Time.now.to_f

puts readSHA(target.split("/"), sha)


end_time = Time.now.to_f

debug "finished in #{end_time - start_time} seconds"
